Step 1 : Project Initialization and Basic Server Setup -
--------------------------------------------------------

A backend folder is created inside uber-video folder.
Inside that folder , Open terminal and run npm init -y command to create package.json file.
Then run npm install express command to install package.
Then create a app.js file inside which -

const express = require('express');

const app = express();

app.get('/', ( req, res )=>{
    res.send("Hello World");
})

module.exports = app;

Create a server.js file inside which we will create a http server
Now I want to listen my server on a port and for that I will install dotnev package using npm install dotenv command.
And require it in app.js file and also configure it using dotenv.config() so that to use it in server.js file to get the port number from .env file.
Also install cors using npm i cors and use it in my app.js file to allow cross origin request.
Now create a server variable which will use my port number from env file.

app.js file -
const dotenv = require('dotenv');

dotenv.config();

const cors = require('cors');

app.use(cors());

server.js file -

const http = require('http');

const app = require('./app');

const port = process.env.PORT || 3000;

const server = http.createServer(app);

server.listen(port, ()=> {
    console.log(`Server is running on port : http://localhost:${port}`);
})

Finally inside package.json file -
 "main": "server.js",

 This is the entry file

 Run command for backend : npx nodemon

 If you add scripts : 

 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js", - npm run start
    "dev": "nodemon server.js" - npm run dev
  },

Step 2 : Database setup using mongoose
---------------------------------------

Install mongoose package and connect it with database
Create a folder inside backend folder as db and inside db folder create a file db.js that has a function to create my databse with my application.
const mongoose = require('mongoose');

function connectToDb() {
    mongoose.connect(process.env.DB_CONNECT)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => {
        console.error('Error connecting to MongoDB:', err);
        process.exit(1); // Exit process if connection fails
    });
}

module.exports = connectToDb;

After that in app.js file require db file and call that connect to db function -

const connectToDb = require('./db/db');

connectToDb();

Step 3 : UserModel create
---------------------------

Require momgoose and create a userSchema with fullname, email, password and socketId.

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    fullname:{
        firstname:{
            type:String,
            required:true,
            minlength: [3, "First name must be atleast 3 characters long"]
        },
        lastname:{
            type:String,
            minlength: [3, "Last name must be atleast 3 characters long"]
        },
    },
    email:{
        type:String,
        required:true,
        unique:true,
        minlength: [5, "Email must be atleast 5 characters long"]
    },
    password:{
        type:String,
        required:true
    },
    // for live tracking so user can track live location of driver or captain.
    socketId:{
        type:String
    }
})

Also add some methods here like for hashing password and comparing password for that I will use a package called bcrypt.
For generating token and basic authentication, i will install and use a package called jsonwebtoken.
Installing commands -
npm i bcrypt jsonwebtoken
After installing require it in user.model.js file -
const bcrypt = require('bcrypt');

const jwt = require('jsonwebtoken');

Now i will add some methods in userSchema -
Method 1 : To generate token -
userSchema.methods.generateAuthToken = function() {
    const token = jwt.sign({ _id: this._id }, process.env.SECRET_KEY);
    return token;
}

Method 2 : To hash password -
userSchema.statics.hashPassword = async function (password) {
    return await bcrypt.hashPassword(password, 10);
}

Method 3 : To Compare password _id
userSchema.methods.comparePassword = async function (passowrd){
    return await bcrypt.compare(passowrd, this.password);
}

And finally i will create my userModel here by -
const userModel = mongoose.model("user", userSchema);

module.exports = userModel;

Now require userModel in controllers (Routes we will create but its logic we will write in controller).
So for that I will create a folder as controllers inside backend folder and create a file as user.controller.js-
Now require userModel in user.controller.js file

Step 4 : Creating API's for user registration, login, and logout
----------------------------------------------------------------

1. Register API for register a user
create a routes folder inside backend folder and inside that create a file as user.routes.js
Inside that user.routes.js file -

const express = require('express');

const router = express.Router();

module.exports = router;

Scenerio : When I register a user i get some data from frontend so i need to validate that data.
so for that i will use a package called express-validator

user.routes.js file -

const { body } = require('express-validator');

Create a route then -

router.post('/register', [
    body('email').isEmail().withMessage('Invalid Email'),
    body('fullname.firstname').isLength({min: 3}).withMessage('First name must be atleast 3 characters long'),
    body('password').isLength({min: 6}).withMessage('Password must be atleast 6 characters long')
],
userController.registerUser
)

Now by going on this register route whatever data i will get I need to validate it using express validator
so for that i will create a function in user.controller.js file.
so require it first here const userController = require('./user.controller');

module.exports.registerUser = async ( req, res, next) => {
    
}

Now I am passing this registerUser as a controller function to register route.
Now I am creating a service to interact with my database>
Inside backend folder create a services folder inside it create a file as user.service.js file

user.service.js file - Just to create a user

const userModel = require('../models/user.model');

const userModel = require('../models/user.model');

module.exports.createUser = async ({
    firstname, lastname, email, password
}) => {
    if(!firstname || !email || !password) {
        throw new Error('All fields are required');
    }
    const user = userModel.create({
        fullname: {
            firstname,
            lastname
        },
        email,
        password
    })
    return user;
}

To perform action on particular while validating user in controller function -
For that we will use Validation Result in userController.js file -
const { validationResult } = require('express-validator');
const errors = validationResult(req);
those errors we will find inside validationResult and pass req also so that you will get errors in this req while validating user on route.

 if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

To send this validation error from backend to frontend i will have it in errors.array

const { fullname, email, password } = req.body;

    const hashedPassword = await userModel.hashPassword(password);

    const user = await userService.createUser({
        firstname: fullname.firstname
        lastname: fullname.lastname
        email,
        password: hashedPassword
    })
    
   const token = user.generateToken();

   res.status(201).json({token,user});

   Now in frontend side we will have to send this token to backend in header
 so that we can authenticate user.

 now go to app.js file require and use this route

 const userRoutes = require('./routes/user.routes');

 app.use('/users', userRoutes);

 Testing -

 Go to postman and http://localhost:4000/users/register
 body-raw-json : {"fullname":{
    "firstname": "test_Tarun",
    "Lastname": "test_Kumar"
},
"email":"test@test.com",
"password":"test_password"
}

Now you will get response with token and user details.

Step 5 : API documentation -

So, send three files to chatgpt 
user.route.js, user.controller.js, user.service.js and write a prompt

PROMPT TO CREATE DOCS FOR API -
Create a readme.md file to docs the /users/register endpoint with description and status code , Add example of response, also write how the data required in the endpoint. create it in the backend folder.

2. Login API to login a user

user.route.js file -

router.post('/login', [
    body('email').isEmail().withMessage('Invalid Email'),
    body('password').isLength({min: 6}).withMessage('Password must be atleast 6 characters long')
],
userController.loginUser
)

user.controller.js -

module.exports.loginUser = async ( req, res, next ) => {

    const errors = validationResult(req);

    if(!errors.isEmpty()){
        return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    console.log(req.body);
    
    const user = await userModel.findOne({ email }).select('+password');

    if(!user) {
        return res.status(404).json({ message: 'Invalid email or password' });
    }
    
    const isMatch = await user.comparePassword(password);

    if(!isMatch) {
        return res.status(404).json({ message: 'Invalid email or password' });
    }

    const token = user.generateAuthToken();

    res.status(200).json({ token, user });
    
}

Checking on postman - http://localhost:4000/users/login

HTTP Method - post
Body - raw
JSON -
{
    "email": "test@gmail.com",
    "password": "test123"
}

Prepare a login api docs.

3. Profile API for seeing a user Profile

First i will create a profile route 
router.get('/profile', userController.getUserProfile);

create controller function for getting user profile


module.exports.getUserProfile = async ( req, res, next ) => {
    // Check user logic then return user profile
    res.status(200).json(req.user);
}

To check a authorized user , I will create a middlewares folder and inside it i will have a auth.middleware.js file
const userModel = require('../models/user.model');

const bcrypt = require('bcrypt');

const jwt = require('jsonwebtoken');

module.exports.authUser = async (req, res, next) => {
    
}

Token verification logic will be inside this middleware

Token mainly we get from two places -
1. header - const token = req.headers.authorization
2. cookies - const token = req.cookies.token

In authorization part, 
I have to split and then will get token - req.headers.authorization.split(' ')[ 1 ];
after that I have to decode the token

If token doesnt exist in header or cookies, i will send a message as Unauthorized.
If token exist then we will decode it.
After that we will check if const user = await userModel.findById(decoded._id);
set user to req.user and return next;

Now I want to use this middleware in routes.
router.get('/profile', authMiddleware.authUser, userController.getUserProfile);

Whatever user we set in req.user in controller function that as a response will be sended to profile.

Lets check how we test token using header-
Go to postman
http method : get
http://localhost:4000/users/profile
Go to Headers
Key - Authorization
Value - bearer "token value copy at the time of login"
bearer eyJhbGciOiJIUzI1NiIsInR5cCI6I

Need a middleware to interact with cookies i.e, npm i cookie-parser
and require it in app.js file -
const cookieParser = require('cookie-parser');
app.use(cookieParser());
Now we can use it in auth middleware.

Lets check how we test token using cookies-
res.cookie('token', token) while generating token in login controller.
go to postman click on send then open cookies then if u dont add header it will still allow login with profile
if u add header then it will not allow login with profile.

4. Logout API for seeing a user logout

We will delete the token from cookies.
We will create a collection of blacklisted tokens
















  









