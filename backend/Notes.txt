Step 1: Project Initialization and Basic Server Setup -

A backend folder is created inside uber-video folder.
Inside that folder , Open terminal and run npm init -y command to create package.json file.
Then run npm install express command to install package.
Then create a app.js file inside which -

const express = require('express');

const app = express();

app.get('/', ( req, res )=>{
    res.send("Hello World");
})

module.exports = app;

Create a server.js file inside which we will create a http server
Now I want to listen my server on a port and for that I will install dotnev package using npm install dotenv command.
And require it in app.js file and also configure it using dotenv.config() so that to use it in server.js file to get the port number from .env file.
Also install cors using npm i cors and use it in my app.js file to allow cross origin request.
Now create a server variable which will use my port number from env file.

app.js file -
const dotenv = require('dotenv');

dotenv.config();

const cors = require('cors');

app.use(cors());

server.js file -

const http = require('http');

const app = require('./app');

const port = process.env.PORT || 3000;

const server = http.createServer(app);

server.listen(port, ()=> {
    console.log(`Server is running on port : http://localhost:${port}`);
})

Finally inside package.json file -
 "main": "server.js",

 This is the entry file

 Run command for backend : npx nodemon

 If you add scripts : 

 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js", - npm run start
    "dev": "nodemon server.js" - npm run dev
  },

Step 2: Database setup using mongoose

Install mongoose package and connect it with database
Create a folder inside backend folder as db and inside db folder create a file db.js that has a function to create my databse with my application.
const mongoose = require('mongoose');

function connectToDb() {
    mongoose.connect(process.env.DB_CONNECT)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => {
        console.error('Error connecting to MongoDB:', err);
        process.exit(1); // Exit process if connection fails
    });
}

module.exports = connectToDb;

After that in app.js file require db file and call that connect to db function -

const connectToDb = require('./db/db');

connectToDb();

Step 3: UserModel create

Require momgoose and create a userSchema with fullname, email, password and socketId.

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    fullname:{
        firstname:{
            type:String,
            required:true,
            minlength: [3, "First name must be atleast 3 characters long"]
        },
        lastname:{
            type:String,
            minlength: [3, "Last name must be atleast 3 characters long"]
        },
    },
    email:{
        type:String,
        required:true,
        unique:true,
        minlength: [5, "Email must be atleast 5 characters long"]
    },
    password:{
        type:String,
        required:true
    },
    // for live tracking so user can track live location of driver or captain.
    socketId:{
        type:String
    }
})

Also add some methods here like for hashing password and comparing password for that I will use a package called bcrypt.
For generating token and basic authentication, i will install and use a package called jsonwebtoken.
Installing commands -
npm i bcrypt jsonwebtoken
After installing require it in user.model.js file -
const bcrypt = require('bcrypt');

const jwt = require('jsonwebtoken');

Now i will add some methods in userSchema -
Method 1 : To generate token -
userSchema.methods.generateAuthToken = function() {
    const token = jwt.sign({ _id: this._id }, process.env.SECRET_KEY);
    return token;
}

Method 2 : To hash password -
userSchema.statics.hashPassword = async function (password) {
    return await bcrypt.hashPassword(password, 10);
}

Method 3 : To Compare password _id
userSchema.methods.comparePassword = async function (passowrd){
    return await bcrypt.compare(passowrd, this.password);
}

And finally i will create my userModel here by -
const userModel = mongoose.model("user", userSchema);

module.exports = userModel;

Now require userModel in controllers (Routes we will create but its logic we will write in controller).
So for that I will create a folder as controllers inside backend folder and create a file as user.controller.js-
Now require userModel in user.controller.js file









